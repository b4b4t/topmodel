{
  "$id": "topmodel.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "target": {
      "type": "string",
      "description": "Cible de la génération",
      "enum": [
        "None",
        "Persisted",
        "Dto",
        "Persisted_Dto",
        "Api",
        "Api_Persisted",
        "Api_Dto",
        "Api_Dto_Persisted"
      ]
    },
    "domain": {
      "oneOf": [
        {
          "type": "string",
          "description": "Domaine a utiliser pour le type de composition (si ce n'est pas une composition simple)."
        },
        {
          "type": "object",
          "description": "Domaine a utiliser pour le type de composition (si ce n'est pas une composition simple).",
          "required": [
            "name"
          ],
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "description": "Nom du domaine."
            },
            "parameters": {
              "type": "array",
              "description": "Paramètres du domaine.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "property": {
      "oneOf": [
        {
          "type": "object",
          "description": "Propriété standard.",
          "required": [
            "name",
            "domain",
            "comment"
          ],
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "description": "Nom de la propriété C#/TS. Sera converti en SQL en TRIGRAM_{{SNAKE_CASE}}. Cette propriété DOIT être en PREMIER."
            },
            "label": {
              "type": "string",
              "description": "Libellé de la propriété. Sera utilisé comme libellé pour le champ dans Focus."
            },
            "primaryKey": {
              "type": "boolean",
              "description": "Précise si la propriété fait partie de la clé primaire de la table associée à la classe. Une classe avec au moins une clé primaire sera persistée."
            },
            "required": {
              "type": "boolean",
              "description": "Précise si la propriété est obligatoire. Elle sera non nulle en SQL et obligatoire dans la validation côté Focus. Une primary key est forcément required."
            },
            "readonly": {
              "type": "boolean",
              "description": "Une propriété 'readonly' ne pourra pas être renseignée par un mapper et aucun setter ne sera généré si la classe contenant la propriété est abstraite."
            },
            "domain": {
              "$ref": "#/definitions/domain"
            },
            "trigram": {
              "type": "string",
              "description": "Surcharge locale du trigram"
            },
            "comment": {
              "type": "string",
              "description": "Description de la propriété."
            },
            "defaultValue": {
              "description": "Valeur par défaut de la propriété, dans les classes et les endpoints."
            },
            "customProperties": {
              "type": "object",
              "description": "Propriétés de propriété personnalisées, pour utilisation dans un générateur personnalisé.",
              "additionalProperties": {
                "type": [ "string", "boolean", "integer", "number" ]
              }
            }
          }
        },
        {
          "type": "object",
          "description": "Propriété d'association (clé étrangère).",
          "required": [
            "association",
            "comment"
          ],
          "additionalProperties": false,
          "properties": {
            "association": {
              "type": "string",
              "description": "Nom de la classe référencée par cette propriété. Doit être référencée dans ce fichier, soit en y étant déclarée, soit en étant listée dans la section 'uses' du fichier. Cette propriété DOIT être en PREMIER."
            },
            "label": {
              "type": "string",
              "description": "Libellé de la propriété. Sera utilisé comme libellé pour le champ dans Focus."
            },
            "role": {
              "type": "string",
              "description": "Suffixe de l'association, utile pour distinguer deux associations vers une même classe par exemple."
            },
            "type": {
              "type": "string",
              "description": "Type de l'association. Par défaut: 'manyToOne'",
              "enum": [
                "oneToOne",
                "oneToMany",
                "manyToOne",
                "manyToMany"
              ]
            },
            "as": {
              "type": "string",
              "description": "Domaine `as` à utiliser pour la transformation de domaine pour une association `toMany`. Par défaut : 'list'."
            },
            "required": {
              "type": "boolean",
              "description": "Précise si la propriété est obligatoire. Elle sera non nulle en SQL et obligatoire dans la validation côté Focus. Une primary key est forcément required."
            },
            "primaryKey": {
              "type": "boolean",
              "description": "Précise si la propriété fait partie de la clé primaire de la table associée à la classe. Une classe avec au moins une clé primaire sera persistée."
            },
            "readonly": {
              "type": "boolean",
              "description": "Une propriété 'readonly' ne pourra pas être renseignée par un mapper et aucun setter ne sera généré si la classe contenant la propriété est abstraite."
            },
            "defaultValue": {
              "description": "Valeur par défaut de la propriété, dans les classes et les endpoints."
            },
            "comment": {
              "type": "string",
              "description": "Description de la propriété."
            },
            "trigram": {
              "type": "string",
              "description": "Surcharge locale du trigram"
            },
            "className": {
              "type": "string",
              "description": "Surcharge du nom de la classe cible dans le nom de la propriété d'association."
            },
            "property": {
              "type": "string",
              "description": "Propriété de la classe cible à utiliser pour la clé étrangère (au lieu de la clé primaire)."
            },
            "customProperties": {
              "type": "object",
              "description": "Propriétés de propriété personnalisées, pour utilisation dans un générateur personnalisé.",
              "additionalProperties": {
                "type": [ "string", "boolean", "integer", "number" ]
              }
            }
          }
        },
        {
          "type": "object",
          "description": "Alias vers un champ existant.",
          "required": [
            "alias"
          ],
          "additionalProperties": false,
          "properties": {
            "alias": {
              "type": "object",
              "description": "Définition de propriété(s) à recopier d'une autre classe. Cette propriété DOIT être en PREMIER.",
              "required": [
                "class"
              ],
              "allOf": [
                {
                  "not": {
                    "required": [
                      "property",
                      "include"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "property",
                      "exclude"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "include",
                      "exclude"
                    ]
                  }
                }
              ],
              "additionalProperties": false,
              "properties": {
                "class": {
                  "type": "string",
                  "description": "Nom de la classe depuis laquelle on veut recopier des propriétés. Doit être référencée dans ce fichier, soit en y étant déclarée, soit en étant listée dans la section 'uses' du fichier."
                },
                "property": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Propriété de la classe cible à recopier."
                    },
                    {
                      "type": "array",
                      "description": "Liste des propriétés à recopier.",
                      "items": {
                        "type": "string",
                        "description": "Propriété de la classe cible à recopier."
                      }
                    }
                  ]
                },
                "include": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Propriété de la classe cible à recopier."
                    },
                    {
                      "type": "array",
                      "description": "Liste des propriétés à recopier.",
                      "items": {
                        "type": "string",
                        "description": "Propriété de la classe cible à recopier."
                      }
                    }
                  ]
                },
                "exclude": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Recopie toutes les propriétés de la classe cible, sauf celle ci."
                    },
                    {
                      "type": "array",
                      "description": "Recopie toutes les propriétés de la classe cible, sauf celles-ci.",
                      "items": {
                        "type": "string",
                        "description": "Propriété de la classe cible à ignorer."
                      }
                    }
                  ]
                }
              }
            },
            "prefix": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "Préfixe à ajouter au nom de la propriété aliasée."
                },
                {
                  "type": "boolean",
                  "description": "Ajoute le nom de la classe comme préfixe au nom de la propriété aliasée."
                }
              ]
            },
            "name": {
              "type": "string",
              "description": "Surcharge locale du nom de la propriété aliasée."
            },
            "trigram": {
              "type": "string",
              "description": "Surcharge locale du trigram"
            },
            "suffix": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "Suffixe à ajouter au nom de la propriété aliasée."
                },
                {
                  "type": "boolean",
                  "description": "Ajoute le nom de la classe comme suffixe au nom de la propriété aliasée."
                }
              ]
            },
            "domain": {
              "$ref": "#/definitions/domain"
            },
            "label": {
              "type": "string",
              "description": "Surcharge le libellé de la propriété aliasée."
            },
            "required": {
              "type": "boolean",
              "description": "Surcharge le caractère obligatoire de la propriété aliasée."
            },
            "primaryKey": {
              "type": "boolean",
              "description": "Précise si la propriété fait partie de la clé primaire de la table associée à la classe. Une classe avec au moins une clé primaire sera persistée. **Un alias ne récupère pas `primaryKey: true` de la propriété qu'il recopie.**"
            },
            "readonly": {
              "type": "boolean",
              "description": "Surcharge le caractère readonly de la propriété aliasée."
            },
            "comment": {
              "type": "string",
              "description": "Surcharge le commentaire de la propriété aliasée."
            },
            "as": {
              "type": "string",
              "description": "Utilise le domaine correspondant dans `asDomains` du domaine de la propriété (original ou surchargé) comme domaine de la propriété d'alias."
            },
            "defaultValue": {
              "description": "Surcharge la valeur par défaut de la propriété."
            },
            "customProperties": {
              "type": "object",
              "description": "Propriétés de propriété personnalisées, pour utilisation dans un générateur personnalisé. Elles s'ajouteront à celles de la propriété originale (avec remplacement si conflit).",
              "additionalProperties": {
                "type": [ "string", "boolean", "integer", "number" ]
              }
            }
          }
        },
        {
          "type": "object",
          "description": "Propriété de composition avec une autre classe.",
          "required": [
            "composition",
            "name",
            "comment"
          ],
          "additionalProperties": false,
          "properties": {
            "composition": {
              "type": "string",
              "description": "Nom de la classe à composer. Doit être référencée dans ce fichier, soit en y étant déclarée, soit en étant listée dans la section 'uses' du fichier. Cette propriété DOIT être en PREMIER."
            },
            "name": {
              "type": "string",
              "description": "Nom de la propriété."
            },
            "label": {
              "type": "string",
              "description": "Libellé de la propriété. Sera utilisé comme libellé pour le champ dans Focus."
            },
            "domain": {
              "$ref": "#/definitions/domain"
            },
            "comment": {
              "type": "string",
              "description": "Description de la propriété."
            },
            "readonly": {
              "type": "boolean",
              "description": "Une propriété 'readonly' ne pourra pas être renseignée par un mapper et aucun setter ne sera généré si la classe contenant la propriété est abstraite."
            },
            "required": {
              "type": "boolean",
              "description": "Précise si la propriété est obligatoire (`true` par défaut sur les compositions). Une composition obligatoire sera initialisée avec une instance vide."
            },
            "trigram": {
              "type": "string",
              "description": "Surcharge locale du trigram"
            },
            "customProperties": {
              "type": "object",
              "description": "Propriétés de propriété personnalisées, pour utilisation dans un générateur personnalisé.",
              "additionalProperties": {
                "type": [ "string", "boolean", "integer", "number" ]
              }
            }
          }
        }
      ]
    },
    "valueTemplate": {
      "oneOf": [
        {
          "type": "string",
          "description": "Template de valeur à utiliser. Peut utiliser la variable '{value}' pour référencer la valeur renseignée dans le modèle."
        },
        {
          "type": "object",
          "description": "Template de valeur à utiliser, avec des imports supplémentaires si besoin.",
          "required": [
            "value"
          ],
          "additionalProperties": false,
          "properties": {
            "value": {
              "type": "string",
              "description": "Template de valeur à utiliser. Peut utiliser la variable '{value}' pour référencer la valeur renseignée dans le modèle."
            },
            "imports": {
              "type": "array",
              "description": "Imports à ajouter pour utiliser ce template.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    }
  },
  "oneOf": [
    {
      "type": "object",
      "description": "Définition d'un fichier.",
      "required": [
        "module",
        "tags"
      ],
      "additionalProperties": false,
      "properties": {
        "module": {
          "type": "string",
          "description": "Nom du module contenant ce fichier."
        },
        "tags": {
          "type": "array",
          "description": "Tags de fichier, pour déterminer quels générateurs doivent lire tel fichier.",
          "items": {
            "type": "string"
          }
        },
        "uses": {
          "type": "array",
          "description": "Dépendances du fichier courant. Il est nécessaire de spécifier l'intégralité des fichiers existants utilisés dans de fichier, et d'en lister toutes les classes référencées.",
          "items": {
            "type": "string"
          }
        },
        "options": {
          "type": "object",
          "description": "Définition des options relatives au fichier.",
          "additionalProperties": false,
          "properties": {
            "endpoints": {
              "type": "object",
              "description": "Définition des options relatives aux endpoints déclarés dans le fichier.",
              "additionalProperties": false,
              "properties": {
                "prefix": {
                  "type": "string",
                  "description": "Préfix des endpoints."
                },
                "fileName": {
                  "type": "string",
                  "description": "Nom du fichier regroupant les endpoints",
                  "default": "Nom du fichier courant"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "object",
      "description": "Définition d'un domaine.",
      "required": [
        "domain"
      ],
      "additionalProperties": false,
      "properties": {
        "domain": {
          "type": "object",
          "description": "Domaine.",
          "required": [
            "name",
            "label"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Nom (ou code) du domaine."
            },
            "label": {
              "type": "string",
              "description": "Libellé du domaine."
            },
            "length": {
              "type": "number",
              "description": "Longueur du champ dans le domaine. Pour un type décimal, il s'agit de la précision."
            },
            "scale": {
              "type": "number",
              "description": "Pour un type décimal, nombre de chiffres après la virgule."
            },
            "autoGeneratedValue": {
              "type": "boolean",
              "description": "Précise si la valeur d'une propriété du domaine est auto-générée (par exemple un ID)"
            },
            "bodyParam": {
              "type": "boolean",
              "description": "Passe un champ de ce domaine comme body param dans un endpoint."
            },
            "asDomains": {
              "type": "object",
              "description": "Domaines à utiliser lorsque l'on veut transformer le domaine d'un champ dans un alias ou une association `xxxToMany` (avec `as`).",
              "additionalProperties": {
                "type": "string"
              }
            },
            "mediaType": {
              "type": "string",
              "description": "Type de médias (utilisé si retourné par un endpoint)."
            }
          },
          "additionalProperties": {
            "type": "object",
            "description": "Implémentation du domaine dans un langage",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "description": "Type du domaine. Peut contenir des variables"
              },
              "genericType": {
                "type": "string",
                "description": "Type générique pour le domaine. Doit contenir la variable '{T}' (en plus des autres variables si nécessaire) pour référencer le type original de la propriété. Pour une composition, il s'agit de la valeur de `composition.name`, pour une PK ou UK d'une classe enum, il s'agit de la représentation de l'enum dans le langage cible, et pour une transformation pour un alias ou une association (via `as`, et association `toMany`), il s'agit du type résolu de la propriété originale. Si non renseigné, sa valeur par défaut pour une composition ou une enum est `{T}` (la valeur de `type` sera utilisée pour une transformation)."
              },
              "imports": {
                "type": "array",
                "description": "Imports nécessaires au bon fonctionnement du type. Peuvent contenir des variables",
                "items": {
                  "type": "string",
                  "description": "Import nécessaire au bon fonctionnement du type. Peut contenir des variables"
                }
              },
              "annotations": {
                "type": "array",
                "description": "Annotations à ajouter sur toutes les propriétés de ce domaine (par exemple pour aider l'ORM a mapper le type correctement).",
                "items": {
                  "type": "object",
                  "description": "Annotations à ajouter  (ex : `@CreatedDate`)",
                  "required": [
                    "text"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "text": {
                      "type": "string",
                      "description": "Annotation à ajouter. Peut contenir des variables"
                    },
                    "target": {
                      "$ref": "#/definitions/target"
                    },
                    "imports": {
                      "type": "array",
                      "description": "Liste des imports nécessaires au bon fonctionnement de cette annotation",
                      "items": {
                        "type": "string",
                        "description": "Import nécessaire au bon fonctionnement de l'annotation. Peut contenir des variables"
                      }
                    }
                  }
                }
              },
              "values": {
                "type": "object",
                "description": "Templates à utiliser pour la génération lorsqu'une valeur (par défaut) est renseignée pour une propriété de ce domaine",
                "additionalProperties": false,
                "properties": {
                  "template": {
                    "$ref": "#/definitions/valueTemplate"
                  },
                  "overrides": {
                    "type": "object",
                    "description": "Surcharges pour des valeurs spécifiques.",
                    "additionalProperties": {
                      "$ref": "#/definitions/valueTemplate"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "object",
      "description": "Définition d'un convertisseur de domaine",
      "required": [
        "converter"
      ],
      "additionalProperties": false,
      "properties": {
        "converter": {
          "type": "object",
          "required": [
            "from",
            "to"
          ],
          "properties": {
            "from": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Domains sources du convertisseur"
              }
            },
            "to": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Domains cibles du convertisseur"
              }
            }
          },
          "additionalProperties": {
            "type": "object",
            "description": "Implémentation du convertisseur dans le cas où la conversion n'est pas implicite",
            "additionalProperties": false,
            "properties": {
              "text": {
                "type": "string",
                "description": "Implémentation du convertisseur. Accepte les templates. Utiliser {value} pour la valeur du paramètre d'entrée, et {to.type} ou {from.type} pour les propriétés du domaine source ou cible"
              },
              "imports": {
                "type": "array",
                "description": "Imports à ajouter pour utiliser ce convertisseur.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "object",
      "description": "Définition d'un décorateur.",
      "required": [
        "decorator"
      ],
      "additionalProperties": false,
      "properties": {
        "decorator": {
          "type": "object",
          "description": "Décorateur.",
          "required": [
            "name",
            "description"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Nom du décorateur."
            },
            "description": {
              "type": "string",
              "description": "Description du décorateur."
            },
            "preservePropertyCasing": {
              "type": "boolean",
              "description": "Garde les noms de propriétés tels quels lors de la génération, au lieu de les convertir dans le format du langage cible."
            },
            "properties": {
              "type": "array",
              "description": "Liste des propriétés du décorateur.",
              "items": {
                "$ref": "#/definitions/property"
              }
            }
          },
          "additionalProperties": {
            "type": "object",
            "description": "Implémentation du décorateur.",
            "additionalProperties": false,
            "properties": {
              "extends": {
                "type": "string",
                "description": "Classe (hors TopModel) dont une classe implémentant ce décorateur doit dériver."
              },
              "implements": {
                "type": "array",
                "description": "Interfaces (hors TopModel) qu'une classe implémentant ce décorateur doit implémenter.",
                "items": {
                  "type": "string"
                }
              },
              "annotations": {
                "type": "array",
                "description": "Annotations à ajouter sur une classe implémentant ce décorateur.",
                "items": {
                  "type": "string"
                }
              },
              "imports": {
                "type": "array",
                "description": "Imports à ajouter pour utiliser ce décorateur.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "object",
      "description": "Définition d'une classe.",
      "required": [
        "class"
      ],
      "additionalProperties": false,
      "properties": {
        "class": {
          "type": "object",
          "description": "Définition d'une classe.",
          "required": [
            "name",
            "comment",
            "properties"
          ],
          "additionalProperties": false,
          "properties": {
            "tags": {
              "type": "array",
              "description": "Tags supplémentaires à ajouter sur cette classe pour la génération.",
              "items": {
                "type": "string"
              }
            },
            "trigram": {
              "type": "string",
              "description": "Le trigramme qui préfixera toutes les propriétés de la classe en SQL"
            },
            "name": {
              "type": "string",
              "description": "Nom de la classe. Sera converti en SQL en SNAKE_CASE."
            },
            "pluralName": {
              "type": "string",
              "description": "Nom de la classe au pluriel. Sera généré à partir du nom avec un 's' si non renseigné."
            },
            "sqlName": {
              "type": "string",
              "description": "Nom SQL de la classe. Sera généré à partir du nom standard si non renseigné."
            },
            "extends": {
              "type": "string",
              "description": "Nom de la classe parente de cette classe. Doit être référencée dans ce fichier, soit en y étant déclarée, soit en étant listée dans la section 'uses' du fichier."
            },
            "label": {
              "type": "string",
              "description": "Un libellé qui décrit la classe. N'est utilisé nulle part."
            },
            "reference": {
              "type": "boolean",
              "description": "Précise si la classe est une liste de référence (pour mise en cache dans 'ReferenceManager' ou 'referenceStore'."
            },
            "defaultProperty": {
              "type": "string",
              "description": "Propriété de la classe qui sera utilisée comme libellé pour la liste de référence et les trier. Renseigné par défaut par la propriété 'Label' ou 'Libelle', si elle existe sur la classe."
            },
            "orderProperty": {
              "type": "string",
              "description": "Propriété de la classe qui sera utilisée pour trier la liste de référence à la place de la propriété par défaut. Renseigné par défaut par la propriété 'Order' ou 'Ordre', si elle existe sur la classe."
            },
            "flagProperty": {
              "type": "string",
              "description": "Propriété de la classe qui sera utilisée comme flag binaire, en plus du code dans une liste de référence statique. Renseigné par défaut par la propriété 'Flag', si elle existe sur la classe."
            },
            "preservePropertyCasing": {
              "type": "boolean",
              "description": "Garde les noms de propriétés tels quels lors de la génération, au lieu de les convertir dans le format du langage cible."
            },
            "abstract": {
              "type": "boolean",
              "description": "Permet de marquer la classe comme abstraite, pour laquelle aucune implémentation ne sera générée."
            },
            "comment": {
              "type": "string",
              "description": "Description de la classe."
            },
            "enum": {
              "type": "boolean",
              "description": "Force la catégorisation de la classe comme enum (ou non). Une enum doit avoir au moins une `value` et ne peut pas avoir de clé primaire multiple. Si non renseigné, une classe sera une enum en plus de ces contraintes si le domaine de sa clé primaire n'a pas de valeur auto-générée."
            },
            "decorators": {
              "type": "array",
              "description": "Décorateurs de la classe",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Nom du décorateur"
                  },
                  {
                    "type": "object",
                    "description": "Nom du décorateur",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Paramètre du décorator"
                      }
                    }
                  }
                ]
              }
            },
            "properties": {
              "type": "array",
              "description": "Liste des propriétés de la classe.",
              "items": {
                "$ref": "#/definitions/property"
              }
            },
            "unique": {
              "type": "array",
              "description": "Liste des clés d'unicité sur la classe. Chaque clé est un array des propriétés concernées (même s'il n'y en a qu'une).",
              "items": {
                "type": "array",
                "items": {
                  "description": "Nom de la propriété.",
                  "type": "string"
                }
              }
            },
            "values": {
              "type": "object",
              "description": "Liste des valeurs de la table à insérer à la création de la base de données. Il doit d'agir d'un objet ayant pour clés un nom de ligne (qui sera utilisé pour identifier la clé en C#), et pour valeurs un objet de type JSON qui renseigne les valeurs des différentes propriétés."
            },
            "customProperties": {
              "type": "object",
              "description": "Propriétés de classe personnalisées, pour utilisation dans un générateur personnalisé.",
              "additionalProperties": {
                "type": [ "string", "boolean", "integer", "number" ]
              }
            },
            "mappers": {
              "type": "object",
              "description": "Définitions de mappers vers et depuis cette classe.",
              "additionalProperties": false,
              "properties": {
                "from": {
                  "type": "array",
                  "description": "Mappers vers cette classe.",
                  "additionalProperties": false,
                  "items": {
                    "type": "object",
                    "description": "Mapper vers la classe courante",
                    "required": [
                      "params"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "comment": {
                        "type": "string",
                        "description": "Commentaire facultatif du mapper."
                      },
                      "params": {
                        "type": "array",
                        "description": "Liste des paramètres du mapper.",
                        "items": {
                          "oneOf": [
                            {
                              "type": "object",
                              "description": "Paramètre pour le mapper.",
                              "required": [
                                "class"
                              ],
                              "additionalProperties": false,
                              "properties": {
                                "class": {
                                  "type": "string",
                                  "description": "Classe depuis laquelle recopier des propriétés."
                                },
                                "required": {
                                  "type": "boolean",
                                  "description": "Paramètre obligatoire. 'true' par défaut."
                                },
                                "comment": {
                                  "type": "string",
                                  "description": "Commentaire facultatif du mapper."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Nom du paramètre. Utilise le nom de la classe par défaut."
                                },
                                "mappings": {
                                  "type": "object",
                                  "description": "Correspondances de champs entre la classe courante et la classe en paramètre. Les propriétés doivent avoir le même domaine pour pouvoir établir une correspondance.\n\nLes correspondances entre alias, puis entre propriétés de même nom et de même domaine sont ajoutées automatiquement sauf indication contraire (correspondance explicite sur une autre propriété, ou correspondance renseignée à `false` pour la désactiver).",
                                  "additionalProperties": {
                                    "oneOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "boolean"
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "description": "Paramètre pour le mapper",
                              "required": [ "property" ],
                              "additionalProperties": false,
                              "properties": {
                                "property": {
                                  "$ref": "#/definitions/property"
                                },
                                "target": {
                                  "type": "string",
                                  "description": "Propriété cible de la classe courante pour cette propriété. Cette propriété doit avoir le même domaine que la propriété source."
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "to": {
                  "type": "array",
                  "description": "Mappers depuis cette classe.",
                  "additionalProperties": false,
                  "items": {
                    "type": "object",
                    "description": "Définition du mapper.",
                    "required": [
                      "class"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "class": {
                        "type": "string",
                        "description": "Classe vers laquelle recopier des propriétés."
                      },
                      "name": {
                        "type": "string",
                        "description": "Nom du mapper. Utilise le nom de la classe par défaut préfixé par 'To'."
                      },
                      "comment": {
                        "type": "string",
                        "description": "Commentaire facultatif du mapper."
                      },
                      "mappings": {
                        "type": "object",
                        "description": "Correspondances de champs entre la classe courante et la classe en paramètre. Les propriétés doivent avoir le même domaine pour pouvoir établir une correspondance.\n\nLes correspondances entre alias, puis entre propriétés de même nom et de même domaine sont ajoutées automatiquement sauf indication contraire (correspondance explicite sur une autre propriété, ou correspondance renseignée à `false` pour la désactiver).",
                        "additionalProperties": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "boolean"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "object",
      "description": "Définition d'un endpoint",
      "required": [
        "endpoint"
      ],
      "additionalProperties": false,
      "properties": {
        "endpoint": {
          "type": "object",
          "description": "Définition d'un endpoint",
          "required": [
            "name",
            "method",
            "route",
            "description"
          ],
          "additionalProperties": false,
          "properties": {
            "tags": {
              "type": "array",
              "description": "Tags supplémentaires à ajouter sur cette classe pour la génération.",
              "items": {
                "type": "string"
              }
            },
            "name": {
              "type": "string",
              "description": "Nom du endpoint. Sera utilisé comme nom de la méthode/fonction associée"
            },
            "method": {
              "type": "string",
              "description": "Méthode du endpoint.",
              "enum": [
                "GET",
                "HEAD",
                "POST",
                "PUT",
                "DELETE",
                "OPTIONS",
                "PATCH"
              ]
            },
            "route": {
              "type": "string",
              "description": "Route du endpoint. Une propriété d'id dans la route doit être préfixée par son trigramme."
            },
            "description": {
              "type": "string",
              "description": "Description du endpoint."
            },
            "preservePropertyCasing": {
              "type": "boolean",
              "description": "Garde les noms de propriétés tels quels lors de la génération, au lieu de les convertir dans le format du langage cible."
            },
            "returns": {
              "$ref": "#/definitions/property"
            },
            "params": {
              "type": "array",
              "description": "Les paramètres de l'endpoint. Un paramètre, selon son type et sa présence ou non dans la route, sera automatiquement classifié comme 'Route', 'Query' ou 'Body'",
              "items": {
                "$ref": "#/definitions/property"
              }
            },
            "customProperties": {
              "type": "object",
              "description": "Propriétés d'endpoint personnalisées, pour utilisation dans un générateur personnalisé.",
              "additionalProperties": {
                "type": [ "string", "boolean", "integer", "number" ]
              }
            },
            "decorators": {
              "type": "array",
              "description": "Décorateurs du endpoint",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Nom du décorateur"
                  },
                  {
                    "type": "object",
                    "description": "Nom du décorateur",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Paramètre du décorator"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    {
      "type": "object",
      "description": "Description d'un flux de données",
      "required": [
        "dataFlow"
      ],
      "additionalProperties": false,
      "properties": {
        "dataFlow": {
          "type": "object",
          "description": "Description d'un flux de données",
          "additionalProperties": false,
          "required": [
            "name",
            "target",
            "class",
            "type"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "Nom du flux de données."
            },
            "target": {
              "type": "string",
              "description": "Nom de la connection cible du flux de données."
            },
            "class": {
              "type": "string",
              "description": "Type de classe cible du flux de données"
            },
            "type": {
              "type": "string",
              "description": "Type de flux de données.",
              "enum": [
                "insert",
                "replace",
                "hardReplace",
                "merge",
                "mergeDisable"
              ]
            },
            "dependsOn": {
              "type": "array",
              "description": "Flux de données à exécuter avant celui-ci.",
              "items": {
                "type": "string",
                "description": "Flux de données à exécuter avant celui-ci."
              }
            },
            "hooks": {
              "type": "array",
              "description": "Hooks à ajouter au flow",
              "items": {
                "type": "string",
                "description": "Nom du hook",
                "enum": [
                  "beforeFlow",
                  "afterSource",
                  "map",
                  "beforeTarget",
                  "afterFlow"
                ]
              }
            },
            "activeProperty": {
              "type": "string",
              "description": "Pour un flux de type 'mergeDisable', nom de la propriété à utiliser pour déterminer le caractère actif de la ligne."
            },
            "sources": {
              "type": "array",
              "description": "Sources de données pour le flux.",
              "items": {
                "type": "object",
                "description": "Description d'une source de données.",
                "required": [
                  "source",
                  "class",
                  "mode"
                ],
                "additionalProperties": false,
                "properties": {
                  "source": {
                    "type": "string",
                    "description": "Nom de la connection source."
                  },
                  "class": {
                    "type": "string",
                    "description": "Type de classe source.\n\nS'il est différent du type de classe cible et n'est pas la classe cible d'une jointure, alors il doit exister un mapper 'from' de cette classe sur la classe cible.\n\nS'il est utilisé dans une jointure et que ce n'est pas la première classe concernée (qui sera la cible), alors il doit exister un mapper 'to' sur cette classe vers la classe cible de la jointure (première source du flux de données qui définit des 'joinProperties')."
                  },
                  "mode": {
                    "type": "string",
                    "description": "Mode de génération de la source.",
                    "enum": [
                      "partial",
                      "queryAll"
                    ]
                  },
                  "joinProperties": {
                    "type": "array",
                    "description": "A utiliser si une jointure doit être réalisée entre plusieurs sources. Doit lister les propriétés de la classe sur lesquelles il faut joindre, dans le même ordre sur chaque source.\n\nUne seule jointure peut être définie par source. Les sources sans 'joinProperties' seront concatanées entre-elles et avec le résultat de la jointure."
                  },
                  "innerJoin": {
                    "type": "boolean",
                    "description": "Indique dans une jointure s'il faut filtrer ou non les lignes sans correspondance."
                  }
                }
              }
            }
          }
        }
      }
    }
  ]
}